# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DqTrNnqn-mlVNaOodPBQcHQt4XUpHnPh

**import libraries**
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as py

""" **import the dataset**"""

df=sns.load_dataset("titanic")
df.head()

df.describe()

df.info()

df.corr()

df.corr().age.sort_values(ascending=False)

"""**HANDLING NULL VALUES**"""

df.isnull().any()

df["age"].fillna(df["age"].mean(),inplace=True)
df["embarked"].fillna(df["embarked"].mode()[0],inplace=True)
df["deck"].fillna(df["deck"].mode()[0],inplace=True)
df["embark_town"].fillna(df["embark_town"].mode()[0],inplace=True)

df.head()

df.isnull().any()

df.shape

"""**DATA VISUALIZATION**"""

sns.heatmap(df.corr(),annot=True)

sns.pairplot(df)

sns.barplot(x=df["embark_town"],y=df["alone"],ci=0)

"""**OUTLIER DETECTION**"""

sns.boxplot(df["age"])

sns.boxplot(df["fare"])

"""**SPLITTING DEPENDENT AND INDEPENDENT VALUES**"""

df.head()

x=df.drop(columns=["alone"],axis=1)
x.head()

x.shape

type(x)

y=df["alone"]
y.head()

type(y)

"""**ENCODING**"""

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()

x["sex"]=le.fit_transform(x["sex"])
x["embarked"]=le.fit_transform(x["embarked"])
x["class"]=le.fit_transform(x["class"])
x["who"]=le.fit_transform(x["who"])
x["adult_male"]=le.fit_transform(x["adult_male"])
x["deck"]=le.fit_transform(x["deck"])
x["embark_town"]=le.fit_transform(x["embark_town"])
x["alive"]=le.fit_transform(x["alive"])

x.head()

x.sex.value_counts()

x.embarked.value_counts()

x.who.value_counts()

x.adult_male.value_counts()

x.deck.value_counts()

x.embark_town.value_counts()

x.alive.value_counts()

x.shape

sex=pd.get_dummies(x["sex"],drop_first=True)
sex

embarked=pd.get_dummies(x["embarked"],drop_first=True)
embarked

clas=pd.get_dummies(x["class"],drop_first=True)
clas

who=pd.get_dummies(x["who"],drop_first=True)
who

adult_male=pd.get_dummies(x["adult_male"],drop_first=True)
adult_male

deck=pd.get_dummies(x["deck"],drop_first=True)
deck

embark_town=pd.get_dummies(x["embark_town"],drop_first=True)
embark_town

alive=pd.get_dummies(x["alive"],drop_first=True)
alive

x=pd.concat([x,sex,embarked,who,adult_male,deck,embark_town,alive],axis=1)
x

x.drop(['sex','embarked','class','who','adult_male','deck','embark_town','alive'],axis=1,inplace=True)

x

"""**FEATURE SCALING**"""

from sklearn.preprocessing import MinMaxScaler
ms=MinMaxScaler()



"""**Splitting into training and testing**



"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

x_train.shape,x_test.shape,y_train.shape,y_test.shape